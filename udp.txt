package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"time"

	probing "github.com/prometheus-community/pro-bing"
)

func main() {
	// Call the importUrl function to read URLs from a file
	urls, err := importUrl("urls.txt")
	if err != nil {
		log.Fatalf("Error importing URLs: %s", err)
	}

	// URLs are now stored in the 'urls' variable
	fmt.Println("Number of URLs read from the file: ", len(urls))
	
	// url channels
	urlsChan := make(chan string, len(urls))
	resultsChan := make(chan bool, len(urls))
	startTime := time.Now()

	for i := 0; i < 5; i++ {
		go worker(urlsChan, resultsChan, time.Now())
	}

	for _, url := range urls {
		urlsChan <- url
	}
	close(urlsChan)

	successCount := 0
	for range urls {
		if success := <-resultsChan; success {
			successCount++
		}
		
	}
	successPercentage := float64(successCount) / float64(len(urls)) * 100
	fmt.Printf("%.2f%% of the URLs were successfully pinged.\n", successPercentage)

	totalTime := time.Since(startTime)
	fmt.Printf("Total time taken to ping URLs: %s\n", totalTime)
}



func importUrl(filename string) ([]string, error) {
	// Open the file containing the URLs
	file, err := os.Open(filename)
	if err != nil {
		return nil, fmt.Errorf("failed to open file: %w", err)
	}
	defer file.Close()

	// Create a scanner to read the file line by line
	scanner := bufio.NewScanner(file)

	// Create a slice to hold the URLs
	var urls []string

	// Read each line from the file and append to the slice
	for scanner.Scan() {
		url := scanner.Text()
		urls = append(urls, url)
	}

	// Check for errors during reading
	if err := scanner.Err(); err != nil {
		return nil, fmt.Errorf("error while reading file: %w", err)
	}

	return urls, nil
}

func pingUrl(url string) (bool, error) {
	pinger, err := probing.NewPinger(url)
	if err != nil {
		return false, err
	}
	pinger.Count = 3
	err = pinger.Run()
	if err != nil {
		return false, err
	}
	stats := pinger.Statistics()
	if stats.PacketsRecv > 0 {
		return true, nil
	}
	return false, nil
}

func worker(urlsChan <- chan string, resultsChan chan<- bool) {
	for url := range urlsChan {
		success, err := pingUrl(url)
		if err != nil {
			fmt.Printf("Error pinging %s: %v\n", url, err)
		}
		resultsChan <- success

		
		fmt.Printf("Pinged %s | Success: %t | Elapsed Time: %s\n", url, success)
	}
}